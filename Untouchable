#Importando e iniciando bibliotecas
import pygame
pygame.init()
pygame.mixer.init()
from random import randint

#Criando tela e cores
tela = pygame.display.set_mode([600, 600])
pygame.display.set_caption('Untouchable')
vermelho = (255, 0, 0)
verde = (0, 255, 0)
azul = (0, 0, 255)
branco = (255, 255, 255)
preto = (0, 0, 0)
laranja = (255, 165, 0)
laranja = (255, 140, 0)

#Inserindo as imagens
imagem_fundo = pygame.transform.scale(pygame.image.load('imagens/masmorra_print.png'), size = (600,600))
imagem_pers_e = pygame.transform.scale(pygame.image.load('imagens/personagem3_esq.png'), size = (30,50))
imagem_pers_d = pygame.transform.scale(pygame.image.load('imagens/personagem3_dir2.png'), size = (30,50))
imagem_bola = pygame.transform.scale(pygame.image.load('imagens/bola_de_fogo2.png'), size = (80,80))
imagem_boost = pygame.transform.scale(pygame.image.load('imagens/raioamarelo.png'), size = (40,40))
fundo_tela = azul

# Carrega os sons do jogo
pygame.mixer.music.load('sons/mus_fundo1.mp3')
pygame.mixer.music.set_volume(0.4)
boost_sound = pygame.mixer.Sound('sons/pegar_boost.wav')
queimando_sound = pygame.mixer.Sound('sons/lava.flac')
gameover_sound = pygame.mixer.Sound('sons/game_over.mp3')
aparecer_boost_sound = pygame.mixer.Sound('sons/spawn_boost1.mp3')

fps = 60
circulo_x = 300
circulo_y = 300
circulo_x_direc = 5
circulo_y_direc = 8
largura_jogador = 30
altura_jogador = 50
jogador_x = 300
jogador_y = 500
direcao_x_jogador = 0
direcao_y_jogador = 0
velocidade_jogador = 3
fonte = pygame.font.Font('freesansbold.ttf', 20)
fonte_game_over = pygame.font.Font('freesansbold.ttf', 60)
score = 0
recorde_anterior = 0
recorde = 0
timer = pygame.time.Clock()

gameover = False
perdeu = 0

velocidade_booster_disponivel = False
som_boost = 0
velocidade_x = -100
velocidade_y = -100
last_grab = 0
def checar_velocidade_boost():
    global velocidade_booster_disponivel
    global score
    global last_grab
    global velocidade_x
    global velocidade_y
    global velocidade_jogador
    if score - last_grab > 10 and not velocidade_booster_disponivel:
        velocidade_booster_disponivel = True
        velocidade_x = randint(0, 580)
        velocidade_y = randint(0, 580)
def checar_dificuldade():
    global score
    global circulo_x_direc
    global circulo_y_direc
    x = randint(5, 14)
    y = randint(5, 14)
    x_mod = (score // x)
    y_mod = (score // y)
    if circulo_x_direc > 0:
        circulo_x_direc = 5 + x_mod
    elif circulo_x_direc < 0:
        circulo_x_direc = -5 - x_mod
    if circulo_y_direc > 0:
        circulo_y_direc = 8 + y_mod
    elif circulo_y_direc < 0:
        circulo_y_direc = -8 - y_mod
def checar_colisao(jogador_x, jogador_y, bola_x, bola_y):
    if abs(jogador_x - bola_x) < 44 and abs(jogador_y - bola_y) < 54:
        global direcao_x_jogador
        global direcao_y_jogador
        global circulo_x_direc
        global circulo_y_direc
        direcao_x_jogador = 0
        direcao_y_jogador = 0
        circulo_x_direc = 0
        circulo_y_direc = 0
        game_over()
def game_over():
    global gameover
    display_game_over = fonte_game_over.render('GAME OVER', True, vermelho, preto)
    tela.blit(display_game_over, (70, 300))
    tela.blit(display_game_over, (110, 300))
    display_restart = fonte.render('Aperte Espaço para Recomeçar', True, branco, preto)
    tela.blit(display_restart, (170, 450))
    tela.blit(display_restart, (140, 450))
    gameover = True

def atualizar_posicao_jogador():
    global jogador_x
    global jogador_y
    global direcao_x_jogador
    global direcao_y_jogador
    if direcao_x_jogador > 0:
        if jogador_x < 600 - largura_jogador:
            jogador_x += direcao_x_jogador * velocidade_jogador
    if direcao_x_jogador < 0:
        if jogador_x > 0:
            jogador_x += direcao_x_jogador * velocidade_jogador
    if direcao_y_jogador > 0:
        if jogador_y < 600 - altura_jogador:
            jogador_y += direcao_y_jogador * velocidade_jogador
    if direcao_y_jogador < 0:
        if jogador_y > 0:
            jogador_y += direcao_y_jogador * velocidade_jogador
def atualizar_posicao_bola():
    global circulo_x 
    global circulo_y 
    global circulo_x_direc
    global circulo_y_direc 
    global score
    if circulo_x_direc > 0:
        if circulo_x < 570:
            circulo_x += circulo_x_direc
        else:
            circulo_x_direc *= -1
            score += 1
    elif circulo_x_direc < 0:
        if circulo_x > 30:
            circulo_x += circulo_x_direc
        else:
            circulo_x_direc *= -1
            score += 1
    if circulo_y_direc > 0:
        if circulo_y < 570:
            circulo_y += circulo_y_direc
        else:
            circulo_y_direc *= -1
            score += 1
    elif circulo_y_direc < 0:
        if circulo_y > 30:
            circulo_y += circulo_y_direc
        else:
            circulo_y_direc *= -1
            score += 1


imagem_pers = imagem_pers_e
contador = 0
#Loop do jogo
pygame.mixer.music.play(loops=-1)
rodando = True
while rodando:
    timer.tick(fps)
    atualizar_posicao_bola()
    atualizar_posicao_jogador()
    checar_dificuldade()
    checar_velocidade_boost()
    for evento in pygame.event.get():
        if evento.type == pygame.QUIT:
            rodando = False
        if evento.type == pygame.KEYDOWN:
            if evento.key == pygame.K_LEFT or evento.key == pygame.K_a:
                direcao_x_jogador = -1
                imagem_pers = imagem_pers_e
            if evento.key == pygame.K_RIGHT or evento.key == pygame.K_d:
                direcao_x_jogador = 1
                imagem_pers = imagem_pers_d
            if evento.key == pygame.K_UP or evento.key == pygame.K_w:
                direcao_y_jogador = -1
            if evento.key == pygame.K_DOWN or evento.key == pygame.K_s:
                direcao_y_jogador = 1
        if evento.type == pygame.KEYUP:
            if evento.key == pygame.K_LEFT or evento.key == pygame.K_a:
                direcao_x_jogador = 0
                imagem_pers = imagem_pers_e
            if evento.key == pygame.K_RIGHT or evento.key == pygame.K_d:
                direcao_x_jogador = 0
                imagem_pers = imagem_pers_d
            if evento.key == pygame.K_UP or evento.key == pygame.K_w:
                direcao_y_jogador = 0
            if evento.key == pygame.K_DOWN or evento.key == pygame.K_s:
                direcao_y_jogador = 0
            if evento.key == pygame.K_SPACE and gameover:
                circulo_x = 300
                circulo_y = 300
                circulo_x_direc = 5
                circulo_y_direc = 8
                jogador_x = 300
                jogador_y = 500
                recorde_anterior = score
                if score > recorde:
                    recorde = score
                score = 0
                last_grab = 0
                velocidade_jogador = 3
                velocidade_x = -100
                velocidade_y = -100
                velocidade_booster_disponivel = False
                gameover = False
                perdeu = 0
                som_boost = 0

    tela.fill((preto))
    tela.blit(imagem_fundo,(0,0))


    tela.fill((fundo_tela))

    bola = pygame.draw.circle(tela, verde, (circulo_x, circulo_y), 30, 5)
    bola = pygame.draw.circle(tela, laranja, (circulo_x, circulo_y), 30, 5)
    pygame.draw.circle(tela, vermelho, (circulo_x, circulo_y), 25)
    jogador = pygame.draw.rect(tela, laranja, [jogador_x, jogador_y, largura_jogador, altura_jogador])
    tela.blit(imagem_bola,(circulo_x-40,circulo_y-40))

    jogador = pygame.rect.Rect(jogador_x, jogador_y, largura_jogador, altura_jogador)
    tela.blit(imagem_pers,(jogador_x,jogador_y))
    checar_colisao(jogador.centerx, jogador.centery, bola.centerx, bola.centery)

    if gameover and perdeu == 0:
        gameover_sound.play()
        perdeu = 1

    display_score = fonte.render('Score: '+ str(score), True, branco, preto)
    tela.blit(display_score, (10, 10))
    display_recorde_anterior = fonte.render('Last Score: '+ str(recorde_anterior), True, branco, preto)
    tela.blit(display_recorde_anterior, (10, 30))
    display_recorde = fonte.render('High Score: '+ str(recorde), True, branco, preto)
    tela.blit(display_recorde, (10, 50))
    if velocidade_booster_disponivel:
        velocidade_boost = pygame.draw.rect(tela, branco, [velocidade_x, velocidade_y, 20, 20])

        velocidade_boost = pygame.rect.Rect(velocidade_x, velocidade_y, 20, 20)
        tela.blit(imagem_boost,(velocidade_x,velocidade_y))
        if som_boost == 0:
            aparecer_boost_sound.play() 
            som_boost = 1
        if jogador.colliderect(velocidade_boost):
            boost_sound.play()
            velocidade_jogador += 1
            velocidade_x = -100
            velocidade_y = -100
            last_grab = score
            velocidade_booster_disponivel = False
            som_boost = 0
    display_velo = fonte.render('Velocidade: '+ str(velocidade_jogador - 2), True, branco, preto)
    tela.blit(display_velo, (450, 10))
    pygame.display.flip()

    contador += 1
#Encerrando a biblioteca
pygame.quit()